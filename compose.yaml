services:

  # Веб-сайт на Django. Запускается либо через Gunicorn, либо через команду runserver.
  # Способ запуска и параметры запуска определяются скриптом entrypoint.sh.
  website:
    image: ${DOCKER_REGISTRY}/mikhpo/personal-website:latest
    platform: "linux/amd64"
    build:
      context: .
      dockerfile: ./personal_website/Dockerfile
      tags:
        - mikhpo/personal-website:latest
        - ghcr.io/mikhpo/personal-website:latest
      platforms:
        - "linux/amd64"
    environment:
      - STORAGE_ROOT=/srv/website/storage
      - STATIC_ROOT=/srv/website/static
      - BACKUP_ROOT=/srv/website/backups
      - LOGS_ROOT=/srv/website/logs
      - TEMP_ROOT=/srv/website/temp
    env_file: .env
    ports:
      - ${DJANGO_PORT}:${DJANGO_PORT}
    volumes:
      - ${STORAGE_ROOT}:/srv/website/storage:rw
      - ${STATIC_ROOT}:/srv/website/static:rw
      - ${BACKUP_ROOT}:/srv/website/backups:rw
      - ${LOGS_ROOT}:/srv/website/logs:rw
      - ${TEMP_ROOT}:/srv/website/temp:rw
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      minio:
        condition: service_healthy
        restart: true

    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${DJANGO_PORT}"]
      interval: 5s
      timeout: 5scompose
      retries: 5
    develop:
      watch:
        - action: rebuild
          path: .

  # Кластер PostgreSQL для веб-сайта. База данных создается автоматически.
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    env_file: .env
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - postgres-data:/var/lib/postgresql/data:rw
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Прокси-сервер Nginx. Образ включает Certbot для получения и обновления сертификатов.
  # При создании контейнера производится автоматическое создание конфигурационного файла
  # из каталога с шаблонами и заполнение переменными окружения утилитой envsubst.
  nginx:
    build: ./nginx
    environment:
      - STORAGE_ROOT=/srv/website/storage
      - STATIC_ROOT=/srv/website/static
    env_file: .env
    ports:
      - ${NGINX_PORT}:${NGINX_PORT}
      - 443:443
    volumes:
      - ./nginx/templates:/etc/nginx/templates:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:rw
      - ${STORAGE_ROOT}:/srv/website/storage:ro
      - ${STATIC_ROOT}:/srv/website/static:ro
      - nginx-certs:/etc/letsencrypt/live/${DOMAIN_NAME}:rw
    depends_on:
      website:
          condition: service_healthy
          restart: true
    restart: always
    develop:
      watch:
        - action: rebuild
          path: ./nginx

  # S3-совместимое объектное хранилище Minio.
  minio:
    image: minio/minio
    command: minio server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    env_file: .env
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio-data:/data:rw
    restart: always
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres-data:
  nginx-certs:
  minio-data:
