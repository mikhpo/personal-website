# Выполнить Python тесты веб-сайта.
name: Test Python code

# Рабочий процесс выполняется при открытии и переоткрытии Pull Request,
# а также при добавлении новых коммитов в Pull Request.
on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'nginx/**'
      - '.vscode/**'

env:
  DEBUG: True
  DJANGO_PORT: 8000
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  STORAGE_ROOT: ${{ github.workspace }}/storage
  STATIC_ROOT: ${{ github.workspace }}/static
  BACKUP_ROOT: ${{ github.workspace }}/backups
  LOGS_ROOT: ${{ github.workspace }}/logs
  TEMP_ROOT: ${{ github.workspace }}/temp
  PROJECT_NAME: personal_website
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_HOST: localhost
  POSTGRES_PORT: 5432
  POSTGRES_DB: personal_website
  EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
  EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
  DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}
  LANG: ru_RU.utf8
  PYTHON_VERSION: '3.12'

jobs:
  ruff_check:
    name: Ruff check
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/workflows/reusable-steps.yml
      - name: Check Ruff linter
        run: poetry run ruff check

  mypy_check:
    name: Mypy check
    runs-on: ubuntu-latest
    steps:
      - uses: ./.github/workflows/reusable-steps.yml
      - name: Run Mypy tool
        run: poetry run mypy .

  test_python_with_pytest:
    name: Run Pytest
    runs-on: ubuntu-latest

    # Тесты использует службу PostgreSQL, развернутую в контейнере.
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: ./.github/workflows/reusable-steps.yml

      # Пакет wkhtmltopdf необходим для создания фейковых изображений.
      - name: Install wkhtmltopdf
        run: |
          sudo apt-get update
          sudo apt-get install wkhtmltopdf

      # Пакет locales необходим для форматирования значений даты и времени.
      - name: Install locales
        run: |
          sudo apt-get update
          sudo apt-get install locales
          sudo rm -rf /var/lib/apt/lists/*
          sudo localedef -i ru_RU -c -f UTF-8 -A /usr/share/locale/locale.alias ${{ env.LANG }}

      # Установка Node.js необходима для получения npm.
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      # Установка пакетов из npm требуется для сбора статических файлов.
      - name: Install Node.js dependencies
        run: |
          npm install
          npm ls

      # Проверить, что отсутствуют изменения в моделях, для которых не подготовлено миграций.
      - name: Check Django migrations
        run: poetry run python personal_website/manage.py makemigrations --dry-run --check

      # Выполнить сбор статических файлов административной командой Django.
      - name: Collect static files
        run: poetry run python personal_website/manage.py collectstatic --noinput

      # Запустить тесты проекта Django при помощи Pytest.
      - name: Run Pytest
        run: poetry run pytest

      # Сохранить отчет по покрытию в формате HTML.
      - name: Upload Coverage HTML report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html-report
          path: htmlcov/
